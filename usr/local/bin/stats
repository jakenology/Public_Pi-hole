#!/usr/bin/env python
# Public Pi-hole Status
import pihole as ph, urllib2, json

# Resolver Information (Required)
# API ACCESS METHOD: IP OR HOSTNAME
access_method="IP"
domain = ''
resolvers = {
    "master": "18.224.127.179",
    "slaves": ["18.216.251.91"]
}

class api:
    selectormap = {
        "abt": "ads_blocked_today",
        "apt": "ads_percentage_today",
        "ces": "clients_ever_seen",
        "dqt": "dns_queries_today"
    }
    stats = {
        "abt": 0, # Integer
        "apt": 0.0, # Float
        "ces": 0, # Integer
        "dqt": 0 # Integer
    }

def init():
    global master, slaves
    master = ''
    slaves = []

    def format_hostname(host):
        return '.'.join([host, domain])

    if access_method == "HOSTNAME":
        master = format_hostname(resolvers['master'])
        for slave in resolvers['slaves']:
            hostname = format_hostname(slave)
            slaves.append(hostname)
    elif access_method == "IP":
        master = resolvers['master']
        for slave in resolvers['slaves']:
            slaves.append(slave)
    else:
        exit("INVALID ACCESS METHOD")

def internet_on(host):
    try:
        urllib2.urlopen('http://'+host+'/admin/api.php', timeout=0.2)
        return True
    except:
        return False

def get_api_data(resolver):
    def removeCommas(str):
        return str.replace(',', '')

    stats = api.stats.copy()
    pihole = ph.PiHole(resolver)
    stats['abt'] = int(removeCommas(pihole.blocked))
    stats['ces'] = int(removeCommas(pihole.total_clients))
    stats['dqt'] = int(removeCommas(pihole.queries))
    del pihole

    # Return the API Data
    return stats

def public_api():
    downResolvers = []
    api_data = api.stats.copy()
    if internet_on(master):
        try:
            api_data = get_api_data(master)
        except:
            pass
    else:
        downResolvers.append(master)

    for slave in slaves:
        if internet_on(slave):
            try:
                slave_api_data = get_api_data(slave)
                for key, value in slave_api_data.items():
                        api_data[key] += slave_api_data[key]
            except:
                pass
        else:
            downResolvers.append(slave)

    # Percentage Calculation Function
    def calculatePercentage(num1, num2):
        roundToPlaces = 6
        return round(float(num1)/float(num2)*100, roundToPlaces)
    # At least one resolver is up
    if api_data != api.stats:
        # Finalize the API Data
        api_data['apt'] = calculatePercentage(api_data['abt'], api_data['dqt'])
        for key, value in api.selectormap.items():
            api_data[value] = api_data.pop(key)

        # Down Resolvers
        if not downResolvers:
            api_data['downResolvers'] = "none"
        else:
            api_data['downResolvers'] = downResolvers

        # Print the API Data as JSON
        print(json.dumps(api_data))
    else:
        exit("CONNECTION TIMED OUT")
        pass

def main():
    init()
    public_api()

main()
